//
//  ExploreViewController.swift
//  Explore
//
//  Created by Christian Graver on 16/12/2018.
//  Copyright (c) 2018 nordgrus. All rights reserved.
//
//  This file was generated by the Daman Clean Swift Xcode Templates
//  with inspiration from http://clean-swift.com
//

import UIKit
import MapKit

protocol ExploreDisplayLogic: class {
    func display(adventure: Explore.DisplayData.Adventure)
    func display(mapPoint: Explore.DisplayData.MapPoint)
    func displayDiscovered(disovery: Explore.DisplayData.Disovery)
    func displayNearest(distance: Explore.DisplayData.Distance)
}

class ExploreViewController: UIViewController {
    
    // MARK: - Outlets
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var lastFoundLabel: UILabel!
    @IBOutlet weak var distanceLabel: UILabel!
    @IBOutlet weak var mapView: MKMapView!
    @IBOutlet weak var startPauseLabel: UILabel! {
        didSet {
            startPauseLabel.text = "Start!"
        }
    }
    @IBOutlet weak var startSwitch: UISwitch! {
        didSet {
            startSwitch.isOn = false
        }
    }
    
    // MARK: - Properties
    var interactor: ExploreBusinessLogic?
    var router: (NSObjectProtocol & ExploreRoutingLogic & ExploreDataPassing)?
    private var discoveryAnnotations: [MKPointAnnotation] = []
    private var locations: [MKPointAnnotation] = []
    
    // MARK: - Init
    class func instantiate() -> ExploreViewController {
        let name = "\(ExploreViewController.self)"
        let storyboard = UIStoryboard(name: name, bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: name) as! ExploreViewController
        vc.setup()
        return vc
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = ExploreInteractor()
        let presenter = ExplorePresenter()
        let router = ExploreRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        mapView.delegate = self
        viewCreated()
    }
    
    // MARK: - Actions
    @IBAction func debugPlayAudio(_ sender: Any) {
        print("debugPlayAudio")
        interactor?.debugDiscoveryHit(request: Explore.Request.DebugDiscoveryHit())
    }
    @IBAction func exploreStateChanged(_ sender: UISwitch) {
        if sender.isOn {
            adventureShouldStart()
            startPauseLabel.text = "Pause"
        } else {
            adventureShouldPause()
            startPauseLabel.text = "Start!"
        }
    }
    @IBAction func closePressed(_ sender: Any) {
        if startSwitch.isOn {
            //We are exploring? Present alert
            let alert = UIAlertController(title: "Du er i gang med en GravelCast. Vil du gerne stoppe?",
                                          message: nil,
                                          preferredStyle: .alert)
            let yesAction = UIAlertAction(title: "Ja", style: .destructive) { (action) in
                self.adventureShouldFinish()
                self.dismiss(animated: true)
            }
            let noAction = UIAlertAction(title: "Nej", style: .default, handler: nil)
            alert.addAction(noAction)
            alert.addAction(yesAction)
            self.present(alert, animated: true)
        } else {
            adventureShouldFinish()
            dismiss(animated: true)
        }
    }
    
    // MARK: - Interactor interaction
    func viewCreated() {
        let request = Explore.Request.ViewCreated()
        interactor?.viewCreated(request: request)
    }
    
    func adventureShouldStart() {
        let startRequest = Explore.Request.ExploreStart()
        interactor?.explorationStarted(request: startRequest)
    }
    
    func adventureShouldPause() {
        let pauseRequest = Explore.Request.ExplorePause()
        interactor?.explorationPaused(request: pauseRequest)
    }
    
    func adventureShouldFinish() {
        let startRequest = Explore.Request.ExploreEnd()
        interactor?.explorationFinished(request: startRequest)
    }
    // MARK: - Misc
}

// MARK: - ExploreDisplayLogic
extension ExploreViewController: ExploreDisplayLogic {
    func displayNearest(distance: Explore.DisplayData.Distance) {
        distanceLabel.text = distance.distanceString
    }
    
    func display(mapPoint: Explore.DisplayData.MapPoint) {
        
        // Add another annotation to the map.
        let annotation = MKPointAnnotation()
        annotation.coordinate = CLLocationCoordinate2D(latitude: mapPoint.lat, longitude: mapPoint.long)
        
        // Also add to our map so we can remove old values later
        self.locations.append(annotation)
        
        // Remove values if the array is too big
        while locations.count > 100 {
            let annotationToRemove = self.locations.first!
            self.locations.remove(at: 0)
            
            // Also remove from the map
            mapView.removeAnnotation(annotationToRemove)
        }
        
        if UIApplication.shared.applicationState == .active {
            mapView.showAnnotations(self.discoveryAnnotations + self.locations, animated: true)
        } else {
            print("App is backgrounded. New location is added to the list!")
        }
    }
    
    func displayDiscovered(disovery: Explore.DisplayData.Disovery) {
        lastFoundLabel.text = disovery.name
    }
    
    func display(adventure: Explore.DisplayData.Adventure) {
        nameLabel.text = adventure.name
        
        discoveryAnnotations = []
        
        // Directions array
        var directions = [MKDirections]()
        
        for (i, point) in adventure.points.enumerated() {
            let annotation = MKPointAnnotation()
            annotation.title = point.name
            let thisCoordinate = CLLocationCoordinate2D(latitude: point.point.0, longitude: point.point.1)
            annotation.coordinate = thisCoordinate
            discoveryAnnotations.append(annotation)
            
            if let nextPoint = adventure.points[safe: i+1] {
                // Lets make a route
                let directionRequest = MKDirections.Request()
                let thisPlaceMark  = MKPlacemark(coordinate: thisCoordinate)
                let nextCoordinate = CLLocationCoordinate2D(latitude: nextPoint.point.0, longitude: nextPoint.point.1)
                let nextPlaceMark  = MKPlacemark(coordinate: nextCoordinate)
                directionRequest.source = MKMapItem(placemark: thisPlaceMark)
                directionRequest.destination = MKMapItem(placemark: nextPlaceMark)
                directionRequest.transportType = .walking
                
                let direction = MKDirections(request: directionRequest)
                directions.append(direction)
            }
        }
        
        mapView.showAnnotations(discoveryAnnotations, animated: true)
        
        
        // Async calulations
        for direction in directions {
            
            direction.calculate(completionHandler: {
                (response, error) -> Void in
                
                guard let response = response else {
                    if let error = error {
                        print("Error: \(error)")
                    }
                    
                    return
                }
                
                let route = response.routes[0]
                self.mapView.addOverlay((route.polyline), level: MKOverlayLevel.aboveRoads)
            })
        }
    }
}

// MARK: - MKMapViewDelegate
extension ExploreViewController: MKMapViewDelegate {
    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        let renderer = MKPolylineRenderer(overlay: overlay)
        renderer.strokeColor = .primaryColor
        renderer.lineWidth = 3.0
        
        return renderer
    }
}
