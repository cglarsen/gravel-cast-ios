//
//  ShowCastViewController.swift
//  Explore
//
//  Created by Christian Graver on 03/01/2019.
//  Copyright (c) 2019 nordgrus. All rights reserved.
//
//  This file was generated by the Daman Clean Swift Xcode Templates
//  with inspiration from http://clean-swift.com
//

import UIKit
import MapKit
import SnapKit

protocol ShowCastDisplayLogic: class {
    func display(cast: ShowCast.DisplayData.Cast)
}

class ShowCastViewController: UIViewController {
    
    // MARK: - Outlets
    @IBOutlet weak var mapView: MKMapView! {
        didSet {
            mapView.delegate = self
        }
    }
    @IBOutlet weak var pageViewControllerHolderView: UIView!
    
    // MARK: - Properties
    var interactor: ShowCastBusinessLogic?
    var router: (NSObjectProtocol & ShowCastRoutingLogic & ShowCastDataPassing)?
    
    private var cast: ShowCast.DisplayData.Cast?
    private var discoveryAnnotations: [MKPointAnnotation] = []
    private var routePolyLine: MKPolyline?
    fileprivate var pages: [UIViewController] = []

    var pageViewController = UIPageViewController(transitionStyle: .scroll,
                                                  navigationOrientation: .vertical,
                                                  options: nil)
    // MARK: - Init
    class func instantiate() -> ShowCastViewController {
        let name = "\(ShowCastViewController.self)"
        let storyboard = UIStoryboard(name: name, bundle: nil)
        let vc = storyboard.instantiateViewController(withIdentifier: name) as! ShowCastViewController
        vc.setup()
        return vc
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = ShowCastInteractor()
        let presenter = ShowCastPresenter()
        let router = ShowCastRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        viewCreated()
    }
    
    // MARK: - Actions
    
    // MARK: - Interactor interaction
    private func viewCreated() {
        interactor?.viewCreated()
    }
    
    // MARK: - Misc
    func setupView(){
        pageViewController.dataSource = self
        pageViewController.delegate = self
        
        // Add as child vc
        addChild(pageViewController)
            pageViewController.view.translatesAutoresizingMaskIntoConstraints = false
            pageViewControllerHolderView.addSubview(pageViewController.view)
            
            pageViewController.view.snp.makeConstraints { (make) in
                make.bottom.equalTo(pageViewControllerHolderView.snp.bottom)
                make.top.equalTo(pageViewControllerHolderView.snp.top)
                make.left.equalTo(pageViewControllerHolderView.snp.left)
                make.right.equalTo(pageViewControllerHolderView.snp.right)
            }
            
            pageViewController.didMove(toParent: self)
    }
    
    private func mapViewPan(to annotation: MKPointAnnotation) {
        let region = MKCoordinateRegion(center: annotation.coordinate, latitudinalMeters: 2000, longitudinalMeters: 2000)
        mapView.setRegion(region, animated: true)
    }
    
    private func mapViewPanToRoute() {
        if let polyline = self.routePolyLine {
           mapView.setVisibleMapRect(polyline.boundingMapRect, animated: true)
        }
    }
}

// MARK: - ShowCastDisplayLogic
extension ShowCastViewController: ShowCastDisplayLogic {
    func display(cast: ShowCast.DisplayData.Cast) {
        setupMap(with: cast.route)
        setupMap(with: cast.points)
        setupPageVC(with: cast)
    }
    private func setupMap(with route: StravaRoute) {
        mapView.removeOverlays(mapView.overlays)
        
        let points: [CLLocationCoordinate2D] = route.coordinates.map { (coor) -> CLLocationCoordinate2D in
            return CLLocationCoordinate2D(latitude: Double(coor.lat)!, longitude: Double(coor.lon)!)
        }
        
        let routePolyline = MKPolyline(coordinates: points, count: points.count)
        self.routePolyLine = routePolyline
        mapView.addOverlay(routePolyline)
        mapView.setVisibleMapRect(routePolyline.boundingMapRect, animated: true)
    }
    
    private func setupMap(with discoveries: [ShowCast.DisplayData.Discovery]) {
        discoveryAnnotations = []
        
        discoveryAnnotations = discoveries.map({ (discoveryVM) -> MKPointAnnotation in
            let annotation = MKPointAnnotation()
            annotation.title = discoveryVM.name
            let thisCoordinate = CLLocationCoordinate2D(latitude: discoveryVM.point.0, longitude: discoveryVM.point.1)
            annotation.coordinate = thisCoordinate
            return annotation
        })
        
        mapView.showAnnotations(discoveryAnnotations, animated: true)
    }
    private func setupPageVC(with cast: ShowCast.DisplayData.Cast) {
        let presentCastVC = PresentCastViewController.instantiate(cast: cast)
        pages.append(presentCastVC)
        
        for discovery in cast.points {
            let showDiscoveryVC = ShowDiscoveryViewController.instantiate(discovery: discovery)
            pages.append(showDiscoveryVC)
        }
        
        if let firstVC = pages.first {
            pageViewController.setViewControllers([firstVC], direction: .forward, animated: true, completion: nil)
        }
    }
}

extension ShowCastViewController: MKMapViewDelegate {
    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        let renderer = MKPolylineRenderer(overlay: overlay)
        renderer.strokeColor = .primaryColor
        renderer.lineWidth = 3.0
        
        return renderer
    }
}

// MARK: - UIPageViewControllerDataSource
extension ShowCastViewController: UIPageViewControllerDataSource {
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {
        guard let viewControllerIndex = pages.index(of: viewController) else { return nil }
        let previousIndex = viewControllerIndex - 1
        guard previousIndex >= 0          else { return nil }
        guard pages.count > previousIndex else { return nil }
        return pages[previousIndex]
    }
    
    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {
        guard let viewControllerIndex = pages.index(of: viewController) else { return nil }
        let nextIndex = viewControllerIndex + 1
        guard nextIndex < pages.count else { return nil }
        guard pages.count > nextIndex else { return nil }
        return pages[nextIndex]
    }
}

//MARK: - UIPageViewControllerDelegate
extension ShowCastViewController: UIPageViewControllerDelegate {
    func pageViewController(_ pageViewController: UIPageViewController,
                            didFinishAnimating finished: Bool,
                            previousViewControllers: [UIViewController],
                            transitionCompleted completed: Bool) {
        guard let currentViewController = pageViewController.viewControllers?[0],
            let index = pages.index(of: currentViewController) else { return }
        
        if let _ = currentViewController as? PresentCastViewController {
            mapViewPanToRoute()
        } else if let _ = currentViewController as? ShowDiscoveryViewController {
            if let annotation = discoveryAnnotations[safe: index - 1] {
                mapViewPan(to: annotation)
            }
        }
    }
}
